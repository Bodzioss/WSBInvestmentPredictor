@page "/import"
@using WSBInvestmentPredictor.Expenses.Models
@using WSBInvestmentPredictor.Expenses.Services
@inject IBankTransactionService BankTransactionService
@inject ITransactionStore TransactionStore
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<PageTitle>Import Transactions</PageTitle>

<h1>Import Bank Transactions</h1>

<div class="row mb-3">
    <div class="col">
        <InputFile OnChange="@LoadFiles" class="form-control" />
    </div>
</div>

@if (isLoading)
{
    <div class="alert alert-info">
        Loading file...
    </div>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@if (transactions != null && transactions.Any())
{
    <div class="alert alert-success">
        Successfully imported @transactions.Count transactions
    </div>

    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Transaction Date</th>
                    <th>Booking Date</th>
                    <th>Counterparty</th>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Currency</th>
                    <th>Account</th>
                    <th>Balance</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in transactions)
                {
                    <tr>
                        <td>@transaction.TransactionDate.ToShortDateString()</td>
                        <td>@(transaction.BookingDate?.ToShortDateString() ?? "-")</td>
                        <td>@transaction.Counterparty</td>
                        <td>@transaction.Title</td>
                        <td>@transaction.Amount.ToString("N2")</td>
                        <td>@transaction.Currency</td>
                        <td>@transaction.Account</td>
                        <td>@(transaction.BalanceAfterTransaction?.ToString("N2") ?? "-") @transaction.BalanceCurrency</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mt-3">
        <button class="btn btn-primary" @onclick="SaveTransactions" disabled="@isSaving">
            @if (isSaving)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="ms-1">Saving...</span>
            }
            else
            {
                <span>Save Transactions</span>
            }
        </button>
        <button class="btn btn-secondary" @onclick="ViewTransactions">View All Transactions</button>
    </div>
}

@code {
    private List<BankTransaction>? transactions;
    private bool isLoading;
    private bool isSaving;
    private string? errorMessage;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            transactions = null;

            var file = e.File;
            if (file == null)
            {
                errorMessage = "No file selected";
                return;
            }

            using var stream = file.OpenReadStream();
            transactions = await BankTransactionService.ProcessCsvFile(stream);
            
            Console.WriteLine($"Loaded {transactions.Count} transactions from file");
            if (transactions.Any())
            {
                var first = transactions.First();
                Console.WriteLine($"First transaction: Date={first.TransactionDate}, Amount={first.Amount}, Account={first.Account}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error processing file: {ex.Message}";
            NotificationService.Notify(NotificationSeverity.Error, "Error", errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveTransactions()
    {
        if (transactions == null || !transactions.Any())
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Warning", "No transactions to save");
            return;
        }

        try
        {
            isSaving = true;
            await TransactionStore.AddTransactions(transactions);
            NotificationService.Notify(NotificationSeverity.Success, "Success", $"Successfully saved {transactions.Count} transactions");
            NavigationManager.NavigateTo("/transactions");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving transactions: {ex.Message}";
            NotificationService.Notify(NotificationSeverity.Error, "Error", errorMessage);
        }
        finally
        {
            isSaving = false;
        }
    }

    private void ViewTransactions()
    {
        NavigationManager.NavigateTo("/transactions");
    }
} 