@namespace WSBInvestmentPredictor.Frontend.Shared.Layout
@inherits LayoutComponentBase
@using Microsoft.Extensions.Localization
@using WSBInvestmentPredictor.Frontend.Shared
@using WSBInvestmentPredictor.Frontend.Shared.Shared
@using Radzen
@using Radzen.Blazor
@using WSBInvestmentPredictor.Frontend.Shared.Navigation
@inject IStringLocalizer<SharedResource> Loc 
@inject Radzen.ThemeService ThemeService
@inject NavigationRegistry NavigationRegistry

@code {
    // Controls sidebar visibility state
    private bool sidebarVisible = true;

    // Available theme options
    private List<string> themes = new()
    {
        "standard",
        "standard-dark"
    };
    // Current active theme
    private string currentTheme = "standard";
    // Icon to display based on current theme
    private string ThemeIcon => currentTheme == "standard-dark" ? "light_mode" : "dark_mode";

    protected override void OnInitialized()
    {
        // On component init, get the current theme from the service
        currentTheme = ThemeService.Theme;
        if (!themes.Contains(currentTheme))
        {
            currentTheme = "standard";
        }
    }

    /// <summary>
    /// Toggles between light and dark themes.
    /// </summary>
    private void ToggleTheme()
    {
        currentTheme = (currentTheme == "standard-dark") ? "standard" : "standard-dark";
        ThemeService.SetTheme(currentTheme);
    }

    /// <summary>
    /// Represents a theme option with its value and localization key.
    /// </summary>
    private record ThemeOption(string Value, string LocalizationKey);

    /// <summary>
    /// Gets the localized display name for a theme option.
    /// </summary>
    private string GetThemeDisplayName(object theme)
    {
        return Loc[((ThemeOption)theme).LocalizationKey];
    }
}

<!-- Global notification component -->
<RadzenNotification />

<RadzenLayout>
    <RadzenHeader>
        <div class="d-flex align-items-center h-100">
            <RadzenButton Icon="menu" Variant="Variant.Text" Click="@(() => sidebarVisible = !sidebarVisible)" Class="ms-3 me-2" />
            <span class="navbar-brand fw-bold">📊 WSB Investment Predictor</span>
            <div class="ms-auto d-flex align-items-center gap-3 me-3">
                <RadzenButton Icon="@ThemeIcon" Click="@ToggleTheme" Variant="Variant.Text" />
                <LanguageSelector />
            </div>
        </div>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="sidebarVisible">
        <RadzenPanelMenu>
            @foreach (var link in NavigationRegistry.Links)
            {
                @if (link is NavLinkGroup group && group.Items.Any())
                {
                    <RadzenPanelMenuItem Text="@group.Title">
                        @foreach (var item in group.Items)
                        {
                            <RadzenPanelMenuItem Text="@item.Title" Path="@item.Url" />
                        }
                    </RadzenPanelMenuItem>
                }
                else
                {
                    <RadzenPanelMenuItem Text="@link.Title" Path="@link.Url" />
                }
            }
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <div class="p-4 h-100">
            @Body
        </div>
    </RadzenBody>
</RadzenLayout>

